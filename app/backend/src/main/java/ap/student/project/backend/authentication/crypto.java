package ap.student.project.backend.authentication;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.util.Base64;

/**
 * Utility class for encoding and decoding numeric values using HMAC-SHA256 hashing
 * based on the day of the week.
 */
public class crypto {

    /**
     * Day-specific secret keys used for encoding/decoding.
     * Indexed from 0 (Sunday) to 6 (Saturday).
     */
    private static final String[] DAY_KEYS = {
            "SundayKey123", "MondayKey456", "TuesdayKey789",
            "WednesdayKeyABC", "ThursdayKeyDEF", "FridayKeyGHI", "SaturdayKeyJKL"
    };

    /**
     * Encodes a given number into a shortened string using a hash-based message authentication code.
     *
     * @param number     An integer between 1 and 99,999 to encode.
     * @param customDate An optional {@link LocalDate} to specify the date context for key selection.
     *                   If {@code null}, the current system date is used.
     * @return A string in the format {@code XXXXXXXX:YYYYY} where:
     * {@code XXXXXXXX} is the first 8 characters of the Base64-encoded HMAC.
     * {@code YYYYY} is the original number modulo 100000.
     * @throws IllegalArgumentException If the number is not between 1 and 99,999.
     * @throws Exception                If any cryptographic error occurs.
     */
    public static String encode(int number, LocalDate customDate) throws Exception {
        if (number < 1 || number > 99999) {
            throw new IllegalArgumentException("Number must be between 1 and 99999.");
        }

        LocalDate currentDate = (customDate != null) ? customDate : LocalDate.now();
        int dayOfWeek = currentDate.getDayOfWeek().getValue() % 7; // Java's DayOfWeek starts at 1 (Monday)
        String dayKey = DAY_KEYS[dayOfWeek];

        String combined = String.format("%05d|%s", number, currentDate);
        byte[] combinedBytes = combined.getBytes(StandardCharsets.UTF_8);
        byte[] keyBytes = dayKey.getBytes(StandardCharsets.UTF_8);

        Mac hmac = Mac.getInstance("HmacSHA256");
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "HmacSHA256");
        hmac.init(keySpec);

        byte[] hashBytes = hmac.doFinal(combinedBytes);
        String encodedHash = Base64.getEncoder().encodeToString(hashBytes);

        return encodedHash.substring(0, 8) + ":" + (number % 100000);
    }

    /**
     * Attempts to decode an encoded string back into the original number.
     *
     * @param encodedString A string previously generated by the {@link #encode(int, LocalDate)} method.
     * @param customDate    An optional {@link LocalDate} to specify the date context for key selection.
     *                      If {@code null}, the current system date is used.
     * @return The decoded number.
     * @throws IllegalArgumentException If the input format is invalid or the number cannot be resolved.
     * @throws Exception                If any cryptographic error occurs during decoding.
     */
    public static int decode(String encodedString, LocalDate customDate) throws Exception {
        String[] parts = encodedString.split(":");
        if (parts.length != 2) {
            throw new IllegalArgumentException("Invalid encoded string format.");
        }

        int remainder;
        try {
            remainder = Integer.parseInt(parts[1]);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Invalid remainder value.");
        }

        LocalDate currentDate = (customDate != null) ? customDate : LocalDate.now();
        int dayOfWeek = currentDate.getDayOfWeek().getValue() % 7;
        String dayKey = DAY_KEYS[dayOfWeek];

        for (int i = 1; i <= 99999; i++) {
            if (i % 100000 == remainder) {
                String testEncode = encode(i, currentDate);
                if (testEncode.startsWith(parts[0])) {
                    return i;
                }
            }
        }

        throw new IllegalArgumentException("Unable to decode the number.");
    }
}
